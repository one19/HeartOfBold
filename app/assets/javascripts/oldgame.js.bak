
//STARTING THE GAME WITH 800/600 RESOLUTION///////
var game = new Phaser.Game(800, 600, Phaser.AUTO, '', { init: boot, preload: preload, create: create, update: update });
// game.state.add("boot", boot);
// var game = new Phaser.Game(800, 600, Phaser.AUTO, '');
// game.state.add("init",init);
// game.state.add("preload",preload);
// game.state.add("create",create);
// game.state.add("update",update);
// //game.state.add("gameOver",gameOver);
// game.state.start("init");


//GLOBAL///////////////////
//single
var player;
var target;
//multiple
var platforms;
var cursors;
var bullets;
var stars;
//descriptors
var isCaptured = 0;
var score = 0;
var scoreText;
var fireRate = 100;
var nextFire = 0;
//Player Vars
var bodyWidth = 3;
var shoulderWidth = 3;
var rightyOrWeird = 1; //weird(-1) sets the fight/left body firing to left
var floatyOrStatic = 'float'
var maxSpeed = 200; //200px / second
var moveSpeed = 200;
var aimSpeed = 100;
var moveDiag = Math.pow( ((moveSpeed * moveSpeed) / 2), 0.5 );
var accel = moveSpeed * 4;
var accelDiag = Math.pow( ((accel * accel) / 2), 0.5 );
//Bullet Vars
var bulletV = 300;
var bulletDist = 200;
//Gun Vars
var akimbo = 1; //determines how many guns the character holds
var lastAkimbo = 0;
var spread = 0;
var aimSpread = 0;
var maxSpread = 10;

function boot() {
  // function preload() {
  // console.log('init has run')
  // // game.load.json('biomeIDs','/biomes/ids.json');
  // // game.load.json('characterIDs','/characters/ids.json');
  // // game.load.json('abilityIDs','/abilities/ids.json');
  // // game.load.json('gunIDs','/guns/ids.json');
  // // game.load.json('projectileIDs','/projectiles/ids.json');
  // // game.load.json('roomIDs','/rooms/ids.json');
  // // game.load.json('titleIDs','/titles/ids.json');
  // }



}
//PRELOAD ASSETS////////////////
function preload() {
  game.load.image('sky', '<%= image_url("sky.png") %>');
  game.load.image('ground', '<%= image_url("platform.png") %>');
  game.load.image('star', '<%= image_url("star.png") %>');
  game.load.spritesheet('dude', '<%= image_url("dude.png") %>', 32, 48);
  game.load.spritesheet('baddie', '<%= image_url("baddie.png") %>', 32, 32);
  
  game.load.json('biomeIDs','/biomes/ids.json');
  game.load.json('characterIDs','/characters/ids.json');
  game.load.json('abilityIDs','/abilities/ids.json');
  game.load.json('gunIDs','/guns/ids.json');
  game.load.json('projectileIDs','/projectiles/ids.json');
  game.load.json('roomIDs','/rooms/ids.json');
  game.load.json('titleIDs','/titles/ids.json');

  var biomeID = _.sample( JSON.parse( game.cache.getJSON('biomeIDs').ids ) );
  game.load.json( 'biome', 'biomes/' + biomeID + '.json' );
  

}

function create() {
  //SETUP/////////////
  //  We're going to be using physics, so enable the Arcade Physics system
  game.physics.startSystem(Phaser.Physics.ARCADE);
  //  A simple background for our game
  game.add.sprite(0, 0, 'sky');
  game.world.setBounds(0, 0, 1920, 1200);

  //PLATFORMS/////////
  //  The platforms group contains the ground and the 2 ledges we can jump on
  platforms = game.add.group();
  //  We will enable physics for any object that is created in this group
  platforms.enableBody = true;
  // Here we create the ground.
  var ground = platforms.create(0, game.world.height - 64, 'ground');
  ground.body.collideWorldBounds = true;
  //  Scale it to fit the width of the game (the original sprite is 400x32 in size)
  ground.scale.setTo(2, 2);
  //  This stops it from falling away when you jump on it
  ground.body.immovable = false;
  //  Now let's create two ledges
  var ledge = platforms.create(400, 400, 'ground');
  ledge.body.immovable = true;
  ledge = platforms.create(-150, 250, 'ground');
  ledge.body.immovable = false;

  //PLAYER/////////////
  // The player and its settings
  player = game.add.sprite(32, game.world.height - 150, 'dude');
  //  We need to enable physics on the player
  game.physics.arcade.enable(player);
  //  Player physics properties. Give the little guy a slight bounce.
  player.body.collideWorldBounds = true;
  //  Our two animations, walking left and right.
  player.animations.add('left', [0, 1, 2, 3], 10, true);
  player.animations.add('right', [5, 6, 7, 8], 10, true);
  player.anchor.set(0.5);
  game.camera.follow(player);

  //POINTER////////////
  target = game.add.sprite(400, 300, 'baddie');
  target.alpha = 0;
  game.canvas.addEventListener('mousedown', requestLock);
  game.input.addMoveCallback(moveAim, this);

  //STARS//////////////
  //  Finally some stars to collect
  stars = game.add.group();
  //  We will enable physics for any star that is created in this group
  stars.enableBody = true;
  //  Here we'll create 12 of them evenly spaced apart
  for (var i = 0; i < 12; i++) {
    //  Create a star inside of the 'stars' group
    var star = stars.create(i * 70, 0, 'star');
    //  Let gravity do its thing
    star.body.gravity.y = 300;
    //  This just gives each star a slightly random bounce value
    star.body.bounce.y = 0.7 + Math.random() * 0.2;
  }

  //BULLETS/////////////
  bullets = game.add.group();
  bullets.enableBody = true;
  bullets.physicsBodyType = Phaser.Physics.ARCADE;
  bullets.createMultiple(50, 'baddie');
  bullets.setAll('checkWorldBounds', true);
  bullets.setAll('outOfBoundsKill', true);


  //  The score
  scoreText = game.add.text(16, 16, 'score: 0', { fontSize: '32px', fill: '#000' });
  scoreText.fixedToCamera = true;

  //CONTROL CREATION/////////////
  cursors = game.input.keyboard.createCursorKeys();
  //game.input.keyboard.addKeyCapture(27)
  this.game.input.keyboard.onDownCallback = function(e) {
    //console.log(e.keyCode)
    if (e.keyCode === 27) {
      releaseLock();
    }
  }

  //console.log( 'biome ids: ' + game.cache.getJSON('biomeIDs') );

  //console.log('x: ' + game.input.activePointer.x + ', y: ' + game.input.activePointer.y)
    
}

function update() {

  collisionDetection();

  //ANIMATION AND ROTATIONS////////////////
  if (isCaptured === 1) {
    player.rotation = game.physics.arcade.angleBetween(player, target);
    cursorCameraDrag(player.body.x, player.body.y);
  } 
  //player.rotation = game.physics.arcade.angleToPointer(player);
  
  if (floatyOrStatic === 'float' ) {
    floatMovement()
  } else {
    staticMovement();
  }

  cursorKeyFire();
  bullets.forEachAlive(bulletRange, this);
  // compare variable lastX

  // lastX = currentX
  // target.x += game.camera.x
  // console.log( "target x: " + target.x + ", target y: " + target.y);
  render();
    
}

function render () {
  game.debug.cameraInfo(game.camera, 500, 32);
  game.debug.spriteCoords(player, 32, 32);
  //game.debug.inputInfo(32, 32);
  //game.debug.pointer( game.input.activePointer );
}

function collectStar ( player, star ) {
  // Removes the star from the screen
  star.kill();
  //  Add and update the score
  score += 10;
  scoreText.text = 'Score: ' + score;
}

function bulletImpact ( platforms, bullet ) {
  // Removes the bullet from the screen
  bullet.kill();
  //  Add and update the score
  score += 1;
  scoreText.text = 'Score: ' + score;
}

function requestLock() {
  if (isCaptured !== 1) {
    game.input.mouse.requestPointerLock();
    target.x = game.input.x + game.camera.x
    target.y = game.input.y + game.camera.y
    bulletV = 500;
  }
  moveSpeed = aimSpeed;
  moveDiag = Math.pow( ((moveSpeed * moveSpeed) / 2), 0.5 );
  target.alpha = 1;
  isCaptured = 1;
}

function releaseLock() {
  //console.log('shut the hell up')
  if (isCaptured === 1) {
    game.input.mouse.releasePointerLock();
    moveSpeed = maxSpeed;
    moveDiag = Math.pow( ((moveSpeed * moveSpeed) / 2), 0.5 );
    bulletV = 300;
    target.alpha = 0;
    isCaptured = 0;
  }
}

function moveAim(pointer, x, y) {
  if (game.input.mouse.locked) {

    target.x += game.input.mouse.event.webkitMovementX;
    target.y += game.input.mouse.event.webkitMovementY;
  }
}

function fire(angle, playx, playy) {
  if (game.time.now > nextFire && bullets.countDead() > 0) {
    nextFire = game.time.now + fireRate;

    var bullet = bullets.getFirstDead();
    bullet.anchor.set(0.5);

    if (akimbo === 1) {
      if (lastAkimbo === 1) {
        lastAkimbo = -1;
      } else {
        lastAkimbo = 1;
      }
    }
    bullet.reset(player.x + bodyWidth, player.y - ( shoulderWidth * rightyOrWeird * lastAkimbo) );
    bullet.body.velocity.x = ( bulletV * Math.sin(angle) ) + ( playx / 2 )
    bullet.body.velocity.y = ( bulletV * Math.cos(angle) ) + ( playy / 2 )
    //bullet.firedFrom = [player.x, player.y];
    //game.physics.arcade.moveToObject(bullet, target, 300);
  }
}

var staticMovement = function() {
  //VELOCITY AND CONTROLS///////////
  //  Reset the players velocity (movement) to zero on key-release
  player.body.velocity.x = 0;
  player.body.velocity.y = 0;
  // we have to define the primitives last, or they'll capture the diagonal movements
  // we also can't use single-escaping clauses, or the diagonal velocity will be too high
  if ( (game.input.keyboard.isDown(Phaser.Keyboard.S) && game.input.keyboard.isDown(Phaser.Keyboard.W)) || (game.input.keyboard.isDown(Phaser.Keyboard.A) && game.input.keyboard.isDown(Phaser.Keyboard.D)) ) { 
    player.animations.stop();
    player.frame = 4;
  } else if (game.input.keyboard.isDown(Phaser.Keyboard.D) && game.input.keyboard.isDown(Phaser.Keyboard.W)) {         //moving right & up
    player.body.velocity.x = moveDiag;
    player.body.velocity.y = -moveDiag;
    //player.animations.play('right');
  } else if (game.input.keyboard.isDown(Phaser.Keyboard.D) && game.input.keyboard.isDown(Phaser.Keyboard.S)) {       //moving right & down
    player.body.velocity.x = moveDiag;
    player.body.velocity.y = moveDiag;
  } else if (game.input.keyboard.isDown(Phaser.Keyboard.A) && game.input.keyboard.isDown(Phaser.Keyboard.W)) {          //moving left & up
    player.body.velocity.x = -moveDiag;
    player.body.velocity.y = -moveDiag;
  } else if (game.input.keyboard.isDown(Phaser.Keyboard.A) && game.input.keyboard.isDown(Phaser.Keyboard.S)) {        //moving left & down
    player.body.velocity.x = -moveDiag;
    player.body.velocity.y = moveDiag;
  } else if (game.input.keyboard.isDown(Phaser.Keyboard.A)) {                               //moving left
    player.body.velocity.x = -moveSpeed;
  } else if (game.input.keyboard.isDown(Phaser.Keyboard.D)) {                              //moving right
    player.body.velocity.x = moveSpeed;
  } else if (game.input.keyboard.isDown(Phaser.Keyboard.W)) {                                 //moving up
    player.body.velocity.y = -moveSpeed;
  } else if (game.input.keyboard.isDown(Phaser.Keyboard.S)) {                               //moving down
    player.body.velocity.y = moveSpeed;
  } else {                                                        //on stop
    player.animations.stop();
    player.frame = 4;
  }
}

var floatMovement = function() {
  // we have to define the primitives last, or they'll capture the diagonal movements
  // we also can't use single-escaping clauses, or the diagonal velocity will be higher than the long/lat
  player.body.maxVelocity =  maxSpeed / 100;
  player.body.acceleration.x = 0;
  player.body.acceleration.y = 0;
  if ( (game.input.keyboard.isDown(Phaser.Keyboard.S) && game.input.keyboard.isDown(Phaser.Keyboard.W)) || (game.input.keyboard.isDown(Phaser.Keyboard.A) && game.input.keyboard.isDown(Phaser.Keyboard.D)) ) { 
    player.animations.stop();
    player.frame = 4;
  } else if (game.input.keyboard.isDown(Phaser.Keyboard.D) && game.input.keyboard.isDown(Phaser.Keyboard.W)) {         //moving right & up
    player.body.acceleration.x = accelDiag;
    player.body.acceleration.y = -accelDiag;
    capSpeed(player, 'upright')
  } else if (game.input.keyboard.isDown(Phaser.Keyboard.D) && game.input.keyboard.isDown(Phaser.Keyboard.S)) {       //moving right & down
    player.body.acceleration.x = accelDiag;
    player.body.acceleration.y = accelDiag;
    capSpeed(player, 'downright')
  } else if (game.input.keyboard.isDown(Phaser.Keyboard.A) && game.input.keyboard.isDown(Phaser.Keyboard.W)) {          //moving left & up
    player.body.acceleration.x = -accelDiag;
    player.body.acceleration.y = -accelDiag;
    capSpeed(player, 'leftup')
  } else if (game.input.keyboard.isDown(Phaser.Keyboard.A) && game.input.keyboard.isDown(Phaser.Keyboard.S)) {        //moving left & down
    player.body.acceleration.x = -accelDiag;
    player.body.acceleration.y = accelDiag;
    capSpeed(player, 'leftdown')
  } else if (game.input.keyboard.isDown(Phaser.Keyboard.A)) {                               //moving left
    player.body.acceleration.x = -accel;
    capSpeed(player, 'left')
  } else if (game.input.keyboard.isDown(Phaser.Keyboard.D)) {                              //moving right
    player.body.acceleration.x = accel;
    capSpeed(player, 'right')
  } else if (game.input.keyboard.isDown(Phaser.Keyboard.W)) {                                 //moving up
    player.body.acceleration.y = -accel;
    capSpeed(player, 'up')
  } else if (game.input.keyboard.isDown(Phaser.Keyboard.S)) {                               //moving down
    player.body.acceleration.y = accel;
    capSpeed(player, 'down')
  } else {                                                        //on stop
    player.animations.stop();
    player.frame = 4;
  }
}

var cursorKeyFire = function() {
  //SECONDARY FIRING/////////////
  if ( (cursors.down.isDown && cursors.up.isDown) || (cursors.left.isDown && cursors.right.isDown) ) {
  //cancelling opposite keydown presses 
  } else if (cursors.right.isDown && cursors.up.isDown) {         //shooting right & up
    releaseLock()
    player.rotation = ( 7 * Math.PI / 4 );
    fire(3 * Math.PI / 4, player.body.velocity.x, player.body.velocity.y);
  } else if (cursors.right.isDown && cursors.down.isDown) {       //shooting right & down
    releaseLock()
    player.rotation = ( Math.PI / 4 );
    fire(Math.PI / 4, player.body.velocity.x, player.body.velocity.y);
  } else if (cursors.left.isDown && cursors.up.isDown) {          //shooting left & up
    releaseLock()
    player.rotation = ( 5 * Math.PI / 4 );
    fire(5 * Math.PI / 4, player.body.velocity.x, player.body.velocity.y);
  } else if (cursors.left.isDown && cursors.down.isDown) {        //shooting left & down
    releaseLock()
    player.rotation = ( 3 * Math.PI / 4 );
    fire(7 * Math.PI / 4, player.body.velocity.x, player.body.velocity.y);
  } else if (cursors.left.isDown) {                               //shooting left
    releaseLock()
    player.rotation = ( Math.PI );
    fire(3 * Math.PI / 2, player.body.velocity.x, player.body.velocity.y);
  } else if (cursors.right.isDown) {                              //shooting right
    releaseLock()
    player.rotation = ( 0 );
    fire(Math.PI / 2, player.body.velocity.x, player.body.velocity.y);
  } else if (cursors.up.isDown) {                                 //shooting up
    releaseLock()
    player.rotation = ( 3 * Math.PI / 2 );
    fire(Math.PI, player.body.velocity.x, player.body.velocity.y);
  } else if (cursors.down.isDown) {                               //shooting down
    releaseLock()
    player.rotation = ( Math.PI / 2 );
    fire(0, player.body.velocity.x, player.body.velocity.y);
  } else if (game.input.activePointer.isDown) {
    fire(-player.rotation + ( Math.PI/2 ), player.body.velocity.x, player.body.velocity.y);
  }
}

var collisionDetection = function () {
  //COLLISION//////////////////////
  //  Collide the player and the stars with the platforms
  game.physics.arcade.collide(player, platforms);
  game.physics.arcade.collide(stars, platforms);
  //DESTRUCTION////////////////////
  //  Checks to see if the player overlaps with any of the stars, if he does call the collectStar function
  game.physics.arcade.overlap(player, stars, collectStar, null, this);
  //  Checks to see if the bullet overlaps with any of the platforms, and calles the bulletImpact function
  game.physics.arcade.overlap(platforms, bullets, bulletImpact, null, this);
}

var getScalar = function(x, y) {
  var scalar = [];
  var magnitude = Math.sqrt( (x * x) + (y * y) );
  scalar.push( x / magnitude);
  scalar.push( y / magnitude);
  return scalar;
}

var capSpeed = function (object, direction) {
  var magnitude = Math.sqrt( Math.pow(object.body.velocity.x, 2) + Math.pow(object.body.velocity.y, 2) );
  if ( magnitude >= maxSpeed ) {
    var scalar = getScalar(object.body.velocity.x, object.body.velocity.y);
    object.body.velocity.x = scalar[0] * moveSpeed;
    object.body.velocity.y = scalar[1] * moveSpeed;
  }
}

var bulletRange = function(object) {
  var x = object.body.position.x - player.body.position.x;
  var y = object.body.position.y - player.body.position.y;
  var r = Math.sqrt( (x * x) + (y * y) );
  // console.log(r);
  if (r >= bulletDist) {
    bulletImpact(null, object);
    // console.log('bullet reached max range and was destroyed');
  }
}

var cursorCameraDrag = function(xx, yy) {
  var xbounds = game.camera.width / 2;
  var ybounds = game.camera.height / 2;
  //console.log('playery: ' + ybounds + ', playerx: ' + xbounds)
  if ( ( (xx > xbounds) && (xx < game.world.width - xbounds) ) || ( (yy > ybounds) && (yy < game.world.height - ybounds) ) ) {
    ///console.log('player body deltax: ' + player.body.deltaX());
    //console.log("I'm draggin' my CURSORRRRR!")
    target.x += player.body.deltaX();
    target.y += player.body.deltaY();
  }
}

